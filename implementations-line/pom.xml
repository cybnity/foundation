<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.cybnity</groupId>
		<artifactId>defense-platform</artifactId>
		<version>${revision}</version>
		<relativePath>..</relativePath>
	</parent>

	<groupId>org.cybnity</groupId>
	<artifactId>components</artifactId>
	<version>${revision}</version>
	<packaging>pom</packaging>
	<name>CYBNITY SOFTWARE COMPONENTS</name>

	<modules>
		<!-- Framework modules (e.g container, common libraries) -->
		<module>framework</module>
		<!-- Implementation modules -->
		<module>infrastructures</module>
		<module>features</module>
		<module>cockpit-foundations</module>
	</modules>

	<!-- Common properties to all the sub-projects -->
	<properties>
		<!-- Standard Trusted Execution Environment (TEE) of java runtime container template -->
		<docker.java.tee.image.name>cybnity/jre-tee</docker.java.tee.image.name>
		<!-- NodeJS container template (Bullseye or buster based on Debian) -->
		<!-- See https://snyk.io/blog/choosing-the-best-node-js-docker-image/ for choice of containerized NodeJS versions -->
		<docker.nodejs.image.name>node:16.17.0-bullseye</docker.nodejs.image.name>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.cybnity.framework</groupId>
				<artifactId>support</artifactId>
				<version>${revision}</version>
			</dependency>
			<dependency>
				<groupId>org.cybnity.framework</groupId>
				<artifactId>immutable</artifactId>
				<version>${revision}</version>
			</dependency>
			<dependency>
				<groupId>org.cybnity.framework</groupId>
				<artifactId>domain</artifactId>
				<version>${revision}</version>
			</dependency>
			<dependency>
				<groupId>org.cybnity.framework</groupId>
				<artifactId>vertx-common</artifactId>
				<version>${revision}</version>
			</dependency>
			<dependency>
				<groupId>org.cybnity.infrastructure.integration.uis.adapters</groupId>
				<artifactId>api</artifactId>
				<version>${revision}</version>
			</dependency>
			<dependency>
				<groupId>org.cybnity.infrastructure.integration.uis.adapters</groupId>
				<artifactId>redis-impl</artifactId>
				<version>${revision}</version>
			</dependency>
			<dependency>
				<groupId>org.cybnity.infrastructure.registry.knr.adapters</groupId>
				<artifactId>api</artifactId>
				<version>${revision}</version>
			</dependency>
			<dependency>
				<groupId>org.cybnity.infrastructure.registry.knr.adapters</groupId>
				<artifactId>janusgraph-impl</artifactId>
				<version>${revision}</version>
			</dependency>
			<dependency>
				<groupId>org.cybnity.features.technical.persistence</groupId>
				<artifactId>redis-store</artifactId>
				<version>${revision}</version>
			</dependency>
			<dependency>
				<groupId>org.cybnity.features</groupId>
				<artifactId>test</artifactId>
				<version>${revision}</version>
			</dependency>
			<dependency>
				<groupId>org.cybnity.features.technical.persistence</groupId>
				<artifactId>janusgraph-repository</artifactId>
				<version>${revision}</version>
				<scope>compile</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit-platform-engine</artifactId>
            <scope>test</scope>
        </dependency>
	</dependencies>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.6</version>
				<reportSets>
					<reportSet>
						<reports>
							<!-- select reports -->
							<report>index</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>

	<profiles>
		<profile>
			<!-- Developer workstation environment -->
			<id>localhost</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<!-- Default activate or deactivate the build of docker image -->
				<docker.skip.build>false</docker.skip.build>
				<docker.skip.tag>false</docker.skip.tag>
				<docker.skip.push>true</docker.skip.push>
				<docker.verbose>true</docker.verbose>
				<docker.imagePullPolicy>IfNotPresent</docker.imagePullPolicy>
				<docker.useColor>true</docker.useColor>
				<docker.images.tag.suffix>-alpha</docker.images.tag.suffix>
				<docker.images.healtcheck.port>8080</docker.images.healtcheck.port>
			</properties>
		</profile>

		<profile>
			<!-- Shared development platform between developers -->
			<id>dev-deploy-environment</id>
			<activation>
				<property>
					<!-- Activation based on -D system property (e.g command line with -Denvironment=dev-deploy) -->
					<name>environment</name>
					<value>dev-deploy</value>
				</property>
			</activation>
			<properties>
				<!-- Default activate or deactivate the build of docker image -->
				<docker.skip.build>false</docker.skip.build>
				<docker.skip.tag>false</docker.skip.tag>
				<docker.skip.push>true</docker.skip.push>
				<docker.verbose>true</docker.verbose>
				<docker.imagePullPolicy>IfNotPresent</docker.imagePullPolicy>
				<docker.useColor>true</docker.useColor>
				<docker.images.tag.suffix>-alpha</docker.images.tag.suffix>
				<docker.images.healtcheck.port>8080</docker.images.healtcheck.port>
			</properties>
		</profile>

		<profile>
			<!-- Test environment -->
			<id>qa-environment</id>
			<activation>
				<property>
					<!-- Activation based on -D system property (e.g command line with -Denvironment=qa) -->
					<name>environment</name>
					<value>qa</value>
				</property>
			</activation>
			<properties>
				<docker.images.healtcheck.port>8080</docker.images.healtcheck.port>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<excludes>
								<!-- None integration test executed as automatic unit test; only executable in manual mode -->
								<exclude>**/*Integration*.java</exclude>
							</excludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Build phase regarding a software version development -->
			<id>commit-stage</id>
			<activation>
				<property>
					<!-- Activation based on -D system property (e.g command line with -Dstage=commit) -->
					<name>stage</name>
					<value>commit</value>
				</property>
			</activation>
			<properties>
				<!-- Default activate or deactivate the build of docker image -->
				<docker.skip.build>false</docker.skip.build>
				<docker.skip.tag>false</docker.skip.tag>
				<docker.skip.push>true</docker.skip.push>
				<docker.verbose>true</docker.verbose>
				<docker.imagePullPolicy>IfNotPresent</docker.imagePullPolicy>
				<docker.useColor>true</docker.useColor>
				<docker.images.tag.suffix>-alpha</docker.images.tag.suffix>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<excludes>
								<!-- None integration test executed as automatic unit test; only executable in manual mode -->
								<exclude>**/*Integration*.java</exclude>
							</excludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Phase of technical quality validation of a software version -->
			<id>technical-quality-stage</id>
			<activation>
				<property>
					<!-- Activation based on -D system property (e.g command line with -Dstage=technical-quality) -->
					<name>stage</name>
					<value>technical-quality</value>
				</property>
			</activation>
			<properties>
				<!-- Default activate or deactivate the build of docker image -->
				<docker.skip.build>false</docker.skip.build>
				<docker.skip.tag>false</docker.skip.tag>
				<!-- Push alpha release into Docker registry -->
				<docker.skip.push>false</docker.skip.push>
				<docker.verbose>true</docker.verbose>
				<docker.imagePullPolicy>IfNotPresent</docker.imagePullPolicy>
				<docker.useColor>true</docker.useColor>
				<docker.images.tag.suffix>-alpha</docker.images.tag.suffix>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<excludes>
								<!-- None integration test executed as automatic unit test; only executable in manual mode -->
								<exclude>**/*Integration*.java</exclude>
							</excludes>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>resolve-dependency</id>
								<phase>validate</phase>
								<configuration>
									<silent>false</silent>
								</configuration>
								<goals>
									<!-- Try to resolve all test scope -->
									<goal>resolve</goal>
									<!-- Try to resolve plugins and optionnaly their dependencies -->
									<goal>resolve-plugins</goal>
								</goals>
							</execution>
							<execution>
								<id>analyze-dependencies</id>
								<phase>validate</phase>
								<goals>
									<!-- Determine missing or unused dependencies -->
									<goal>analyze-dep-mgt</goal>
									<goal>analyze-duplicate</goal>
								</goals>
							</execution>
							<execution>
								<id>report-tree</id>
								<phase>validate</phase>
								<configuration>
										<outputFile>mpp-official-version-pom-tree.txt</outputFile>
										<outputType>text</outputType>
										<appendOutput>false</appendOutput>
								</configuration>
								<goals>
									<!-- Show the dependency hierarchy of the project and dependencies versions managed by the parent pom.xml -->
									<goal>tree</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Phase of integration quality validation of a software version (e.g on an test environment) -->
			<id>integration-quality-stage</id>
			<activation>
				<property>
					<!-- Activation based on -D system property (e.g command line with -Dstage=integration-quality) -->
					<name>stage</name>
					<value>integration-quality</value>
				</property>
			</activation>
			<properties>
				<!-- Default activate or deactivate the build of docker image -->
				<docker.skip.build>false</docker.skip.build>
				<docker.skip.tag>false</docker.skip.tag>
				<!-- Push beta release into Docker registry -->
				<docker.skip.push>false</docker.skip.push>
				<docker.verbose>false</docker.verbose>
				<docker.imagePullPolicy>IfNotPresent</docker.imagePullPolicy>
				<docker.useColor>true</docker.useColor>
				<docker.images.tag.suffix>-beta</docker.images.tag.suffix>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<includes>
								<!-- Only integration test executed as automatic unit test -->
								<include>**/*Integration*.java</include>
							</includes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Step of software behavior validation by testers community (e.g regarding a software beta release) -->
			<id>user-acceptance-test-stage</id>
			<activation>
				<property>
					<!-- Activation based on -D system property (e.g command line with -Dstage=user-acceptance-test) -->
					<name>stage</name>
					<value>user-acceptance-test</value>
				</property>
			</activation>
		</profile>
	</profiles>
</project>
