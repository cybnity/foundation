package org.cybnity.infrastructure.technical.message_bus.adapter.impl.redis;

import io.lettuce.core.RedisClient;
import io.lettuce.core.api.StatefulRedisConnection;
import io.lettuce.core.api.sync.RedisStringCommands;
import io.vertx.redis.client.RedisOptions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * Unit test of RedisOptionsFactory behaviors regarding its supported
 * requirements.
 *
 * @author olivier
 */
@TestInstance(TestInstance.Lifecycle.PER_METHOD)
public class ContextualizedRedisOptionFactoryDeployedSystemIntegrationUseCaseTest extends ContextualizedRedisActiveTestContainer {

    private void executeLettuceClientTest(RedisOptions opts) throws Exception {
        // Test Lettuce client (see https://lettuce.io/core/release/reference/index.html
        // for detail)
        RedisClient client = RedisClient.create(opts.getEndpoint());
        StatefulRedisConnection<String, String> connection = client.connect();
        RedisStringCommands<String, String> sync = connection.sync();

        // Remove potential previous data versions generated by previous unit test
        // executions
        sync.getdel("mib1");
        sync.getdel("mib2");

        // Create records in database
        sync.append("mib1", "Agent J");
        sync.append("mib2", "Agent K");

        // Retrieve and check values
        assertEquals("Agent J", sync.get("mib1"));
        assertEquals("Agent K", sync.get("mib2"));

        connection.close();
        client.shutdown();
    }

    /**
     * Test of connection and usage of redis instance via client configured via
     * basic values.
     *
     * @throws Exception When any exception thrown by the redis options factory.
     */
    @Test
    public void givenManagedRedisClusterResources_whenCreateRedisOptionFromParameters_thenSuccessRedisUsage()
            throws Exception {
        // Define Redis connection and connection values
        RedisOptions options = RedisOptionFactory.createUsersInteractionsSpaceOptions(CONNECTION_USER_ACCOUNT,
                DEFAULT_AUTH_PASSWORD, SERVER_HOST, Integer.toString(SERVER_PORT), DATABASE_NUMBER, DEFAULT_AUTH_PASSWORD);
        // Test connection and usage
        executeLettuceClientTest(options);
    }

    /**
     * Test of connection and usage of redis instance via client configured via
     * environment variable read from a context.
     *
     * @throws Exception When any exception thrown by the redis options factory.
     */
    @Test
    public void givenManagedRedisClusterResources_whenCreateRedisOptionFromEnvironmentVariables_thenSuccessRedisUsage()
            throws Exception {
        // Define Redis connection and host variables
        RedisOptions options = RedisOptionFactory.createUsersInteractionsWriteModelSpaceOptions(getContext());
        // Test connection and usage
        executeLettuceClientTest(options);
    }
}
