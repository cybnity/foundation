package org.cybnity.infrastructure.technical.message_bus.adapter.impl.redis;

import static org.junit.Assert.assertEquals;

import org.cybnity.framework.Context;
import org.cybnity.framework.IContext;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.EnvironmentVariables;

import io.lettuce.core.RedisClient;
import io.lettuce.core.api.StatefulRedisConnection;
import io.lettuce.core.api.sync.RedisStringCommands;
import io.vertx.redis.client.RedisOptions;

/**
 * Unit test of RedisOptionsFactory behaviors regarding its supported
 * requirements.
 * 
 * @author olivier
 *
 */
public class RedisOptionFactoryDeployedSystemIntegration {

    private String connectionUserAccount, connectionPassword, serverHost, serverPort, databaseNumber,
	    defaultAuthPassword;

    private IContext ctx;

    @Rule
    public final EnvironmentVariables environmentVariables = new EnvironmentVariables();

    public void initEnvVariables() {
	// Define environment variables
	environmentVariables.set(
		WriteModelConfigurationVariable.REDIS_WRITEMODEL_CONNECTION_DEFAULT_AUTH_PASSWORD.getName(),
		connectionPassword);
	environmentVariables.set(
		WriteModelConfigurationVariable.REDIS_WRITEMODEL_CONNECTION_DEFAULT_USERACCOUNT.getName(),
		connectionUserAccount);
	environmentVariables.set(WriteModelConfigurationVariable.REDIS_WRITEMODEL_DATABASE_NUMBER.getName(),
		databaseNumber);
	environmentVariables.set(WriteModelConfigurationVariable.REDIS_WRITEMODEL_SERVER_HOST.getName(), serverHost);
	environmentVariables.set(WriteModelConfigurationVariable.REDIS_WRITEMODEL_SERVER_PORT.getName(), serverPort);
    }

    @Before
    public void initRedisConnectionChainValues() {
	defaultAuthPassword = "1gEGHneiLT"; // Redis Kubernetes configuration's REDISCLI_AUTH environment variable
	serverHost = "localhost";
	serverPort = "6379"; // Default port
	databaseNumber = "1";// Default first db number
	connectionUserAccount = "default";
	connectionPassword = defaultAuthPassword;

	// Build reusable context
	this.ctx = new Context();
	ctx.addResource(defaultAuthPassword, "defaultAuthPassword", false);
	ctx.addResource(serverHost, "serverHost", false);
	ctx.addResource(serverPort, "serverPort", false);
	ctx.addResource(databaseNumber, "databaseNumber", false);
	ctx.addResource(connectionUserAccount, "connectionUserAccount", false);
	ctx.addResource(connectionPassword, "connectionPassword", false);
	// Synchronize environment variables test values
	initEnvVariables();
    }

    @After
    public void cleanValues() {
	ctx = null;
	connectionUserAccount = null;
	connectionPassword = null;
	serverHost = null;
	serverPort = null;
	databaseNumber = null;
	defaultAuthPassword = null;
    }

    private void executeLettuceClientTest(RedisOptions opts) throws Exception {
	// Test Lettuce client (see https://lettuce.io/core/release/reference/index.html
	// for detail)
	RedisClient client = RedisClient.create(opts.getEndpoint());
	StatefulRedisConnection<String, String> connection = client.connect();
	RedisStringCommands<String, String> sync = connection.sync();

	// Remove potential previous data versions generated by previous unit test
	// executions
	sync.getdel("mib1");
	sync.getdel("mib2");

	// Create records in database
	sync.append("mib1", "Agent J");
	sync.append("mib2", "Agent K");

	// Retrieve and check values
	assertEquals("Agent J", sync.get("mib1"));
	assertEquals("Agent K", sync.get("mib2"));

	connection.close();
	client.shutdown();
    }

    /**
     * Test of connection and usage of redis instance via client configured via
     * basic values.
     * 
     * @throws Exception
     */
    @Test
    public void givenManagedRedisClusterResources_whenCreateRedisOptionFromParameters_thenSuccessRedisUsage()
	    throws Exception {
	// Define Redis connection and connection values
	RedisOptions options = RedisOptionFactory.createUsersInteractionsSpaceOptions(connectionUserAccount,
		connectionPassword, serverHost, serverPort, databaseNumber, connectionPassword);
	// Test connection and usage
	executeLettuceClientTest(options);
    }

    /**
     * Test of connection and usage of redis instance via client configured via
     * environment variable read from a context.
     * 
     * @throws Exception
     */
    @Test
    public void givenManagedRedisClusterResources_whenCreateRedisOptionFromEnvironmentVariables_thenSuccessRedisUsage()
	    throws Exception {
	// Define Redis connection and host variables
	RedisOptions options = RedisOptionFactory.createUsersInteractionsWriteModelSpaceOptions(ctx);
	// Test connection and usage
	executeLettuceClientTest(options);
    }
}
