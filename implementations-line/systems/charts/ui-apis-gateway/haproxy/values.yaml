## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

## @section Common parameters
##

## @param kubeVersion Override Kubernetes version
##
kubeVersion: ""
## @param nameOverride String to partially override common.names.fullname
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels:
    run: ingress-default-api-gateway
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}
## @param clusterDomain Kubernetes cluster domain name
##
clusterDomain: cluster.local
## @param extraDeploy Array of extra objects to deploy with the release
##
extraDeploy: []

## Enable diagnostic mode in the deployment
##
diagnosticMode:
  ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
  ##
  enabled: false
  ## @param diagnosticMode.command Command to override all containers in the deployment
  ##
  command:
    - sleep
  ## @param diagnosticMode.args Args to override all containers in the deployment
  ##
  args:
    - infinity

## @section Traffic Exposure Parameters
##

## haproxy service parameters
##
service:
  ## @param service.type haproxy service type
  ##
  type: LoadBalancer
  ## @param service.ports [array] List of haproxy service ports (internal terminations)
  ##
  ports:
    - name: http
      protocol: TCP
      # Use port 80 in the service
      port: 80
      targetPort: 80
    - name: https
      protocol: TCP
      # Use port 80 in the service
      port: 443
      targetPort: 443
  ## @param service.clusterIP haproxy service Cluster IP
  ## e.g.:
  ## clusterIP: None
  ##
  clusterIP: ""
  ## @param service.loadBalancerIP haproxy service Load Balancer IP
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
  ##
  loadBalancerIP: ""
  ## @param service.loadBalancerSourceRanges haproxy service Load Balancer sources
  ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ## e.g:
  ## loadBalancerSourceRanges:
  ##   - 10.10.10.0/24
  ##
  loadBalancerSourceRanges: []
  ## @param service.externalTrafficPolicy haproxy service external traffic policy
  ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  ## @param service.annotations Additional custom annotations for haproxy service
  ##
  annotations:
    haproxy.org/check: "enabled"
    haproxy.org/forwarded-for: "enabled"
    haproxy.org/load-balance: "roundrobin"
  ## @param service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
  ## If "ClientIP", consecutive client requests will be directed to the same mongos Pod
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  ##
  sessionAffinity: None
  ## @param service.sessionAffinityConfig Additional settings for the sessionAffinity
  ## sessionAffinityConfig:
  ##   clientIP:
  ##     timeoutSeconds: 300
  ##
  sessionAffinityConfig: {}
  ## @param service.labels Additional custom labels for haproxy service
  ##
  labels: {}

## Configure the ingress resource that allows you to access the haproxy installation
## ref: https://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  ## @param ingress.enabled Enable ingress record generation for haproxy
  ##
  enabled: false

## @section HAProxy Parameters
##
## @param image.registry HAProxy image registry
## @param image.repository HAProxy image repository
## @param image.tag HAProxy image tag (immutable tags are recommended)
## @param image.digest HAProxy image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
## @param image.pullPolicy HAProxy image pull policy
## @param image.pullSecrets HAProxy image pull secrets
##
image:
  registry: docker.io
  repository: bitnami/haproxy
  tag: 2.7.6-debian-11-r1
  digest: ""
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []
## @param replicaCount Number of haproxy replicas to deploy
##
replicaCount: 2
## Configure extra options for haproxy containers' liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param startupProbe.enabled Enable startupProbe on haproxy nodes
## @param startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
## @param startupProbe.periodSeconds Period seconds for startupProbe
## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe
## @param startupProbe.failureThreshold Failure threshold for startupProbe
## @param startupProbe.successThreshold Success threshold for startupProbe
##
startupProbe:
  enabled: false
  failureThreshold: 5
  initialDelaySeconds: 15
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
## @param livenessProbe.enabled Enable livenessProbe on haproxy nodes
## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
## @param livenessProbe.periodSeconds Period seconds for livenessProbe
## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
## @param livenessProbe.successThreshold Success threshold for livenessProbe
##
livenessProbe:
  enabled: true
  failureThreshold: 5
  initialDelaySeconds: 15
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
## @param readinessProbe.enabled Enable readinessProbe on haproxy nodes
## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
## @param readinessProbe.periodSeconds Period seconds for readinessProbe
## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
## @param readinessProbe.successThreshold Success threshold for readinessProbe
##
readinessProbe:
  enabled: true
  failureThreshold: 5
  initialDelaySeconds: 15
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
## @param customStartupProbe Custom startupProbe that overrides the default one
##
customStartupProbe: {}
## @param customLivenessProbe Custom livenessProbe that overrides the default one
##
customLivenessProbe: {}
## @param customReadinessProbe Custom readinessProbe that overrides the default one
##
customReadinessProbe: {}
## haproxy resource requests and limits
## ref: https://kubernetes.io/docs/user-guide/compute-resources/
## @param resources.limits The resources limits for the haproxy containers
## @param resources.requests The requested resources for the haproxy containers
##
resources:
  limits: {}
  requests: {}
## Configure Pods Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param podSecurityContext.enabled Enabled haproxy pods' Security Context
## @param podSecurityContext.fsGroup Set haproxy pod's Security Context fsGroup
##
podSecurityContext:
  enabled: true
  fsGroup: 1001
## Configure Container Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param containerSecurityContext.enabled Enabled haproxy containers' Security Context
## @param containerSecurityContext.runAsUser Set haproxy containers' Security Context runAsUser
## @param containerSecurityContext.runAsNonRoot Set haproxy container's Security Context runAsNonRoot
##
containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsNonRoot: true

## HAProxy Pod Disruption Budget configuration
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
## @param pdb.create Enable a Pod Disruption Budget creation
## @param pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
## @param pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable
##
pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""

## HAProxy Autoscaling configuration
## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
## @param autoscaling.enabled Enable Horizontal POD autoscaling for HAProxy
## @param autoscaling.minReplicas Minimum number of HAProxy replicas
## @param autoscaling.maxReplicas Maximum number of HAProxy replicas
## @param autoscaling.targetCPU Target CPU utilization percentage
## @param autoscaling.targetMemory Target Memory utilization percentage
##
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 11
  targetCPU: 50
  targetMemory: 50

## @param command Override default container command (useful when using custom images)
##
command: []
## @param args Override default container args (useful when using custom images)
##
args: []
## @param hostAliases haproxy pods host aliases
## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
##
hostAliases: []
## @param podLabels Extra labels for haproxy pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}
## @param podAnnotations Annotations for haproxy pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}
## @param podAffinityPreset Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAffinityPreset: ""
## @param podAntiAffinityPreset Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAntiAffinityPreset: soft
## Node affinity preset
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
##
nodeAffinityPreset:
  ## @param nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
  ##
  type: ""
  ## @param nodeAffinityPreset.key Node label key to match. Ignored if `affinity` is set
  ##
  key: ""
  ## @param nodeAffinityPreset.values Node label values to match. Ignored if `affinity` is set
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []

## @param configuration [string] haproxy configuration
## Taken from haproxytech/haproxy chart: https://github.com/haproxytech/helm-charts/tree/main/haproxy
## Help about configuration on https://www.haproxy.com/documentation/hapee/latest/configuration/config-sections/frontend/
##
configuration: |
  global
    #log stdout format raw local0
    # Set remote or local Syslog server addresses to send log files to
    log 127.0.0.1 local0
    log 127.0.0.1 local0 notice
    # Set a timeout for how long you can stay connected to the Runtime API, which is useful for longer interactive terminal sessions
    stats timeout 10m
    maxconn 4096

  defaults
    # All sections below will inherit the settings defined here
    # Set the proxy mode to http (layer 7) or tcp (layer 4)
    mode http
    log global
    option httplog
    option dontlognull
    option http-server-close
    # Add or overwrite any existing X-Forwarded-For header with one containing the client's IP address
    #option forwardfor
    option redispatch 2
    # Retry failed HTTP request
    retries 5
    timeout connect 3s
    timeout http-request 20s
    timeout queue 1m
    timeout client 60s
    timeout server 60s
    timeout http-keep-alive 30s
    timeout check 10s
    maxconn 3000
    balance roundrobin

  frontend www
    bind *:80
    # Add or overwrite any existing X-Forwarded-For header with one containing the client's IP address
    http-request set-header X-Forwarded-For %[src]
    #http-request replace-value Host (.*):.* \1
    # URL path mapping configuration
    use_backend ui_frontend_web_servers if { path_beg /ui/ }
    use_backend api_backend_servers if { path_beg /api/ }
    use_backend sso_authentication_servers if { path_beg /auth/ }
    # Add path required to be exposed for Keycloak interactions (see https://www.keycloak.org/server/reverseproxy)
    use_backend sso_authentication_servers if { path_beg /realms/ }
    use_backend sso_authentication_servers if { path_beg /resources/ }
    use_backend sso_authentication_servers if { path_beg /js/ }
    use_backend sso_authentication_servers if { path_beg /robots.txt }
    # Keycloak administration console exposure (BECAREFULL, AUTHORIZED ONLY FOR DEVELOPMENT)
    use_backend sso_authentication_servers if { path_beg /admin/ }
    default_backend ui_frontend_web_servers

  backend ui_frontend_web_servers
    # Enable HTTP health checks
    option httpchk
    # Change the requested URL path before relaying
    # Example: /ui/xxx become /xxx
    acl p_map path_beg -i /ui/
    http-request set-path %[path,regsub(^/ui,/,g)] if p_map
    # Retry the failed HTTP requests
    retry-on all-retryable-errors
    # Rewrite response before sent back to clients
    # Add an X-Via header containing the hostname of the current HAProxy server processing the traffic
    #http-response add-header X-Via %[env[HOSTNAME]]
    # Hide the true name of the server in the response header, and replace it by a logical name as "uiserver"
    #http-response set-header Server uiserver
    # Enable compression settings allowed
    #filter compression
    #compression algo gzip
    #compression type text/css text/html text/javascript application/javascript text/plain text/xml application/json
    server ui_frontend_system web-reactive-frontend-system:80 check port 80

  backend api_backend_servers
    # Enable HTTP health checks
    option httpchk
    # Change the requested URL path before relaying
    # Example: /api/xxx become /xxx
    acl p_map path_beg -i /api/
    http-request set-path %[path,regsub(^/api,/,g)] if p_map
    # Retry the failed HTTP requests
    retry-on all-retryable-errors
    # Rewrite response before sent back to clients
    # Add an X-Via header containing the hostname of the current HAProxy server processing the traffic
    #http-response add-header X-Via %[env[HOSTNAME]]
    # Hide the true name of the server in the response header, and replace it by a logical name as "apiserver"
    #http-response set-header Server apiserver
    # Websocket supported (see https://www.haproxy.com/documentation/hapee/latest/load-balancing/protocols/websocket/#configure-websockets)
    #option http-server-close
    #timeout tunnel 1h
    server api_backend_system reactive-backend-system:80 check port 80

  backend sso_authentication_servers
    # Enable HTTP health checks
    option httpchk
    http-check connect port 80
    http-check send meth HEAD uri /auth/realms/master
    # Retry the failed HTTP requests
    retry-on all-retryable-errors
    # Rewrite response before sent back to clients
    # Add an X-Via header containing the hostname of the current HAProxy server processing the traffic
    #http-response add-header X-Via %[env[HOSTNAME]]
    # Hide the true name of the server in the response header, and replace it by a logical name as "ssoserver"
    #http-response set-header Server ssoserver
    # Capture part of header's value via regular expression and replace part with new one: insert a Secure flag on each cookie set up by the server
    #http-response replace-value Set-Cookie (.*) \1;\ Secure
    # Session Persistence: routes a client to the same backend server once they have been routed to that server once (avoid session persistence altogether by building the services to be stateless, such as by storing state off of the application servers in a shared database)
    # Dynamic cookies generation based on hash of the IP address, port and secret key
    #cookie SERVER_USED insert indirect nocache dynamic
    #dynamic-cookie-key secretphrase123kjhgf7865.9UFDS
    # Enable compression settings allowed
    #filter compression
    #compression algo gzip
    #compression type text/css text/html text/javascript application/javascript text/plain text/xml application/json
    server sso_backend_system access-control-sso-system:80 check

## @param containerPorts [array] List of container ports to enable in the haproxy container
##
containerPorts:
  - name: http
    containerPort: 80
  - name: https
    containerPort: 443

## @param existingConfigmap configmap with HAProxy configuration
##
existingConfigmap: ""

## @param affinity Affinity for haproxy pods assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## NOTE: `podAffinityPreset`, `podAntiAffinityPreset`, and `nodeAffinityPreset` will be ignored when it's set
##
affinity: {}
## @param nodeSelector Node labels for haproxy pods assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector:
    layer: user-interfaces-area
## @param tolerations Tolerations for haproxy pods assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
## @param schedulerName Name of the k8s scheduler (other than default)
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ""
## @param topologySpreadConstraints Topology Spread Constraints for pod assignment
## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
## The value is evaluated as a template
##
topologySpreadConstraints: []
## @param updateStrategy.type haproxy statefulset strategy type
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
##
updateStrategy:
  ## StrategyType
  ## Can be set to RollingUpdate or OnDelete
  ##
  type: RollingUpdate
## @param priorityClassName haproxy pods' priorityClassName
##
priorityClassName: ""
## @param lifecycleHooks for the haproxy container(s) to automate configuration before or after startup
##
lifecycleHooks: {}
## @param extraEnvVars Array with extra environment variables to add to haproxy nodes
## e.g:
## extraEnvVars:
##   - name: FOO
##     value: "bar"
##
extraEnvVars:
    - name: LOG_LEVEL
      value: info
## @param extraEnvVarsCM Name of existing ConfigMap containing extra env vars for haproxy nodes
##
extraEnvVarsCM: ""
## @param extraEnvVarsSecret Name of existing Secret containing extra env vars for haproxy nodes
##
extraEnvVarsSecret: ""
## @param extraVolumes Optionally specify extra list of additional volumes for the haproxy pod(s)
##
extraVolumes: []
## @param extraVolumeMounts Optionally specify extra list of additional volumeMounts for the haproxy container(s)
##
extraVolumeMounts: []
## @param sidecars Add additional sidecar containers to the haproxy pod(s)
## e.g:
## sidecars:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
sidecars: []
## @param initContainers Add additional init containers to the haproxy pod(s)
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
## e.g:
## initContainers:
##  - name: your-image-name
##    image: your-image
##    imagePullPolicy: Always
##    command: ['sh', '-c', 'echo "hello world"']
##
initContainers: []

## @section Other Parameters
##

## ServiceAccount configuration
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
## @param serviceAccount.create Specifies whether a ServiceAccount should be created
## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.
## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account
## @param serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.
##
serviceAccount:
  ## @param serviceAccount.create Specifies whether a ServiceAccount should be created
  ##
  create: true
  ## @param serviceAccount.name The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the common.names.fullname template
  ##
  name: ""
  automountServiceAccountToken: true
  annotations: {}
