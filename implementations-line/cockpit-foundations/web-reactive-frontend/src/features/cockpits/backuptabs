<div className="vh-100 overflow-hidden">
            <Tabs
                id="perspectivesTabs" fill={true}
                activeKey={currentPerspective}
                onSelect={(eventKey, event) => {
                    dispatch(perspectiveActivated({
                        type: 'ACTIVATE_PERSPECTIVE',
                        perspectiveId: eventKey
                    }));
                }} className="mb-1">

                <Tab tabClassName="button-noborder"
                     title={<NavBarBrandIcon menuOnClickHandler={handleNavigationShortcutsShow}/>}>
                </Tab>

                {perspectivesList.map((item) => <Tab eventKey={item.id} title={<span>
                            {!item.imageMode && item.title}
                    {item.titleImage &&
                        <ComponentRender componentName={item.titleImage} onClick={(event) => {
                            event.stopPropagation(); // Avoid propagation to tabs object (parent else which call onSelect)
                        }}/>
                    }
                    {(item.exportable || item.closable) &&
                        <PerspectiveTitleIconConfig>
                            {item.exportable &&
                                <TfiNewWindow onClick={(event) => {
                                    event.stopPropagation(); // Avoid propagation to tabs object (parent else which call onSelect)
                                    console.log("Request externalization of view (id: " + item.id + ") into independent browser");
                                    openExternalized('risk', item.id);
                                }}/>}
                            {item.closable &&
                                <MdClose onClick={(event) => {
                                    event.stopPropagation(); // Avoid propagation to tabs object (parent else which call onSelect)
                                    dispatch(
                                        perspectiveClosed({
                                            type: 'CLOSE_PERSPECTIVE',
                                            id: item.id
                                        }))
                                }}/>
                            }
                        </PerspectiveTitleIconConfig>}</span>} key={item.id}>
                    {item.componentName &&
                        <ComponentRender componentName={item.componentName}/>
                    }
                </Tab>)
                }
                <Tab tabClassName="button-noborder"
                     title={<NavBarReactIcon reactPanelOnClickHandler={handleReactPanelShow}/>}>
                </Tab>
            </Tabs>
            <NavigationShortcutsOffCanvas show={navigationShortcutsShow} onHide={handleNavigationShortcutsClose}
                                          key='informationDomainShortcutsPanel' placement='start'
                                          name='informationDomainShortcutsPanel'/>
            <ReactPanelOffCanvas show={reactPanelShow} onHide={handleReactPanelClose}
                                 key='reactPanel' placement='end'
                                 name='reactPanel'/>
            <CollaboratePanelNavbar id='communicationsBar'/>
        </div>