<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>cockpit-foundations-impl</artifactId>
		<groupId>org.cybnity</groupId>
		<version>${revision}</version>
		<relativePath>..</relativePath>
	</parent>
	<groupId>org.cybnity.cockpit-foundation</groupId>
	<artifactId>reactive-messaging-gateway</artifactId>
	<packaging>jar</packaging>
	<name>Reactive messaging gateway (Web Backend)</name>

	<properties>
		<main.verticle>org.cybnity.application.ui.system.backend.SockJSReactiveBackendServer</main.verticle>
		<launcher.class>io.vertx.core.Launcher</launcher.class>
	</properties>

	<dependencies>
		<dependency>
			<groupId>io.vertx</groupId>
			<artifactId>vertx-web</artifactId>
		</dependency>
		<dependency>
			<groupId>io.vertx</groupId>
			<artifactId>vertx-junit5</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.cybnity.infrastructure.common</groupId>
			<artifactId>event</artifactId>
			<version>${revision}</version>
		</dependency>
		<dependency>
			<groupId>io.vertx</groupId>
			<artifactId>vertx-redis-client</artifactId>
		</dependency>
		<dependency>
			<groupId>io.vertx</groupId>
			<artifactId>vertx-auth-oauth2</artifactId>
		</dependency>
		<dependency>
			<groupId>io.vertx</groupId>
			<artifactId>vertx-auth-jwt</artifactId>
		</dependency>
		<dependency>
			<groupId>io.vertx</groupId>
			<artifactId>vertx-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.cybnity.infrastructure.integration.uis.adapters</groupId>
			<artifactId>redis-impl</artifactId>
			<version>${revision}</version>
		</dependency>
		<dependency>
			<groupId>org.cybnity.cockpit-foundation.acsc-features</groupId>
			<artifactId>acsc-features-impl</artifactId>
			<scope>compile</scope>
			<version>${revision}</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-shade-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<manifestEntries>
										<Main-Class>${launcher.class}</Main-Class>
										<Main-Verticle>${main.verticle}</Main-Verticle>
									</manifestEntries>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ApacheLicenseResourceTransformer" />
								<transformer implementation="org.apache.maven.plugins.shade.resource.ApacheNoticeResourceTransformer" />
								<transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
							</transformers>
							<createDependencyReducePom>false</createDependencyReducePom>
							<outputFile>${project.build.directory}/${project.artifactId}-${project.version}-fat.jar</outputFile>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<configuration>
					<mainClass>${launcher.class}</mainClass>
					<arguments>
						<argument>run</argument>
						<argument>${main.verticle}</argument>
					</arguments>
				</configuration>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<configuration>
					<images>
						<!-- Create an in-memory Dockerfile, copies over the assembled files and calls the Docker daemon via its remote API -->
						<image>
							<!-- Unique docker repository name including registry and tag parts -->
							<name>cybnity/%a</name>
							<alias>reactive-messaging-gateway</alias>
							<build>
								<!-- The CYBNITY JRE container standard base image (Trusted Execution Environment) extended -->
								<from>cybnity/jre-tee:latest</from>
								<maintainer>CYBNITY Core Team</maintainer>
								<cleanup>try</cleanup>
								<tags>
									<!-- Additional tags which an image is to be tagged after the build -->
									<tag>${revision}</tag>
									<tag>%l</tag>
									<tag>latest</tag>
								</tags>
								<env>
									<!-- Update the default TARTED_JAR_FILE environment variable about Java application jar file name, defined as main jar to start by the container -->
									<STARTED_JAR_FILE>${project.artifactId}-${project.version}-fat.jar</STARTED_JAR_FILE>
								</env>
								<labels>
									<version>${project.version}</version>
									<artifactId>${project.artifactId}</artifactId>
								</labels>
								<entryPoint>
									<!-- Set the jar file to start from the TEE base image's $JAVA_APP_DIR_PATH environment variable defined as safe applications directory -->
									<!-- Becarefull, variable can only be used in shell Form, but are not supported in command invoked via exec form (entrypoint) -->
									<shell>java -jar $JAVA_APP_DIR_PATH/$STARTED_JAR_FILE</shell>
								</entryPoint>
								<assembly>
									<!-- Attach projectâ€™s artifact (its dependencies are embedded into the shaded jar) -->
									<descriptor>shaded-artifact-docker-assembly.xml</descriptor>
									<targetDir>/opt/cybnity</targetDir>
									<mode>dir</mode>
								</assembly>
							</build>
						</image>
					</images>
					<outputDirectory>target/docker</outputDirectory>
					<sourceDirectory>src/main/docker</sourceDirectory>
				</configuration>
				<executions>
					<execution>
						<id>docker-build</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
					<execution>
						<!-- Upload images to the registry -->
						<id>docker-push</id>
						<phase>deploy</phase>
						<goals>
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
