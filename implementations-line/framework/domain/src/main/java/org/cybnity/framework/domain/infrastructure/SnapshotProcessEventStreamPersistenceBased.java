package org.cybnity.framework.domain.infrastructure;

import org.cybnity.framework.UnoperationalStateException;
import org.cybnity.framework.domain.model.*;
import org.cybnity.framework.immutable.ImmutabilityException;

/**
 * Implementation class of a snapshot process which produce and manage snapshots.
 */
public abstract class SnapshotProcessEventStreamPersistenceBased extends AbstractSnapshotProcess {

    /**
     * Streamed events provider that are eligible to snapshots.
     */
    private final IEventStore streamStore;

    /**
     * Store of event stream use as persistence system for generated snapshots.
     */
    private final ISnapshotRepository snapshotsPersistenceSystem;

    /**
     * Factory ensuring the mutation process according to a type of aggregate instance to prepare.
     */
    private final MutedAggregateFactory mutedInstanceFactory;

    /**
     * Duration in second for each snapshot item saved into the snapshot repository.
     */
    private final Long expireInSeconds;

    /**
     * Default constructor.
     *
     * @param streamedEventsProvider     Mandatory readable store regarding change events eligible to snapshot process.
     * @param snapshotsPersistenceSystem Mandatory persistence system supporting the storage of snapshots generated by this process execution(s).
     * @param instancePreparer           Mandatory factory of instance type to hydrate.
     * @param snapshotItemExpireIn       Optional duration in seconds for each snapshot item live (how many second before the snapshot is expired by the repository).
     * @throws IllegalArgumentException When any mandatory parameter is not defined.
     */
    public SnapshotProcessEventStreamPersistenceBased(IEventStore streamedEventsProvider, ISnapshotRepository snapshotsPersistenceSystem, MutedAggregateFactory instancePreparer, Long snapshotItemExpireIn) throws IllegalArgumentException {
        super();
        if (streamedEventsProvider == null)
            throw new IllegalArgumentException("The stream events provider parameter is required!");
        this.streamStore = streamedEventsProvider;
        if (snapshotsPersistenceSystem == null)
            throw new IllegalArgumentException("The snapshots persistence system parameter is required!");
        this.snapshotsPersistenceSystem = snapshotsPersistenceSystem;
        if (instancePreparer == null)
            throw new IllegalArgumentException("The instance preparer parameter is required!");
        this.mutedInstanceFactory = instancePreparer;
        this.expireInSeconds = snapshotItemExpireIn;
    }

    /**
     * Snapshot generation capability callable according to the cycle of creation managed externally.
     *
     * @param streamedObjectIdentifier Mandatory identifier of the source event type that is subject to snapshot.
     * @throws IllegalArgumentException    When mandatory parameter is missing. When loaded object from the object identifier, is not supporting the ISnapshot contract and can't be saved in snapshot repository.
     * @throws UnoperationalStateException When technical problem is occurred regarding this store usage.
     */
    @Override
    public void generateSnapshot(String streamedObjectIdentifier) throws IllegalArgumentException, UnoperationalStateException {
        if (streamedObjectIdentifier == null || streamedObjectIdentifier.isEmpty())
            throw new IllegalArgumentException("Streamed object identifier parameter is required!");
        // Load all events from the source domain object's life history
        EventStream stream = streamStore.loadEventStream(streamedObjectIdentifier);
        if (stream != null) {
            // Get re-hydrated version of instance type based on change events history
            HydrationCapability hydratedInstance = getRehydratedInstanceFrom(stream, mutedInstanceFactory);

            // Detect which type of streamed object is eligible to snapshot support
            if (Aggregate.class.isAssignableFrom(hydratedInstance.getClass())) {
                try {
                    Aggregate agr = (Aggregate) hydratedInstance;
                    if (agr.getCommitVersion() != null)
                        // Save full state version of instance into the stream store
                        snapshotsPersistenceSystem.saveSnapshot(new ConcreteSnapshot(agr), /* namespace of snapshots */ snapshotsNamespace(), this.expireInSeconds);
                } catch (ImmutabilityException ie) {
                    throw new IllegalArgumentException(ie);
                }
            } else {
                throw new IllegalArgumentException("The found original object is not supporting the ISnapshot contract and was not saved!");
            }
        } else {
            throw new IllegalArgumentException("Original object was not found from the stream, and can't be subject of snapshot!");
        }
    }

    /**
     * Build instance type according to the type as a rehydrated full state version.
     * The method ensure the instantiation of new object according to the supported class type, and ensure its rehydration before to return it.
     *
     * @param history Mandatory stream hosting the event type changes history, that shall be used for re-hydration execution.
     * @return Re-hydrated instance eligible to snapshot. The applied re-hydration have been guarantee by this method execution from the history stream provided.
     * @throws IllegalArgumentException When any mandatory parameter is missing.
     */
    protected abstract HydrationCapability getRehydratedInstanceFrom(EventStream history, MutedAggregateFactory mutedInstanceFactory) throws IllegalArgumentException;

    /**
     * Get a name space where snapshot are stored.
     *
     * @return A name.
     */
    protected abstract String snapshotsNamespace();
}
