package org.cybnity.framework.domain;

import org.cybnity.framework.domain.event.IEventType;
import org.cybnity.framework.domain.model.ReadModelProjectionDescriptor;
import org.cybnity.framework.support.annotation.Requirement;
import org.cybnity.framework.support.annotation.RequirementCategory;

import java.util.Collection;

/**
 * Represent a denormalized read repository (also named Query Model) which
 * can subscribe to events on a write model. It's a component of the read side of
 * an application. Segregation elements of the CQRS pattern, this component is
 * responsible to expose readable different sets of classes to other systems
 * (e.g application user interface).
 * <br>
 * Typically, return data item over Data Transfer Objects (DTO) via queries.
 * <br>
 * The implementation system (e.g database) is optimized for reads by being
 * denormalized to suit the specific queries that an application should support
 * on the read side.
 * <br>
 * The returned data versions can be generated by Read Model Projections responsible to realize (through simple set of domain event subscribers hosted by the read-model) generation and update (e.g calculation of derived information, indexed and optimized search criteria ordering of DTO versions) of a persistent Read Model for later consumption.
 *
 * @author olivier
 */
@Requirement(reqType = RequirementCategory.Scalability, reqId = "REQ_SCA_4")
public interface IReadModel {

    /**
     * Get the projections supported by this read model.
     *
     * @return A collection of projections relative several types of queryable domain layer's entities and/or value objects exposed by the bounded context.
     */
    public Collection<IReadModelProjection> projections();

    /**
     * Find a projection that is managed by this read model according to its identification means (e.g from logical name and/or ownership).
     *
     * @param projectionIdentity Mandatory identification of the projection to search from this read-model.
     * @return Found projection. Else return null when none projection is managed by this read-model with equals name and/or ownership.
     * @throws IllegalArgumentException When mandatory parameter is missing.
     */
    public IReadModelProjection findBy(ReadModelProjectionDescriptor projectionIdentity) throws IllegalArgumentException;

    /**
     * Find a projection that support a specific query identified by an event name.
     *
     * @param aQueryEvent Mandatory query event to search as supportable by projection of this read-model.
     * @return A projection or null.
     * @throws IllegalArgumentException When mandatory parameter is not defined.
     */
    public IReadModelProjection findBySupportedQuery(IEventType aQueryEvent) throws IllegalArgumentException;
}
