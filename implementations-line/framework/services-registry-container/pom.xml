<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>impl</artifactId>
		<groupId>org.cybnity.components.framework</groupId>
		<version>${revision}</version>
		<relativePath>..</relativePath>
	</parent>
	<groupId>org.cybnity.framework.container</groupId>
	<artifactId>services-registry</artifactId>
	<version>${revision}</version>
	<packaging>pom</packaging>
	<name>- Services Registry (Docker template)</name>

	<build>
		<plugins>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<configuration>
					<images>
						<!-- Create an in-memory Dockerfile reusable as interactions brokers registry container image -->
						<!-- @Requirement(reqType = RequirementCategory.Maintainability, reqId = "REQ_MAIN_1") -->
						<image>
							<!-- Unique docker repository name including registry and tag parts -->
							<name>cybnity/%a</name>
							<alias>services-registry</alias>
							<!--
							<registry>cybnity/services-registry</registry>-->
							<build>
								<!-- The Zookeeper base image extended from CYBNITY official techstack -->
								<from>${docker.zookeeper.image.name}</from>
								<maintainer>CYBNITY Core Team</maintainer>
								<registry>registry.hub.docker.com/zookeeper</registry>
								<cleanup>try</cleanup>
								<tags>
									<!-- Additional tags which an image is to be tagged after the build -->
									<tag>${revision}${docker.images.tag.suffix}</tag>
								</tags>
								<env>
									<!-- Variables usable during the build and during the runtime phase of this container. SHOULD BE REDEFINED BY INHERENT IMAGES WHICH IMPLEMENT A SERVICES REGISTRY -->
									<!-- HERE IS DEFAULT REDEFINED CONFIGURATION ACCORDING TO THE SERVICES REGISTRY STANDARD ROLE IN CYBNITY ARCHITECTURE (e.g including security control requirements) -->
									<!-- Read basic environment variables documentation at https://hub.docker.com/_/zookeeper -->
									<ZOO_INIT_LIMIT>5</ZOO_INIT_LIMIT>
									<!-- When started with more than one server it will not be allowed to shrink to contain fewer than two participants -->
									<ZOO_STANDALONE_ENABLED>false</ZOO_STANDALONE_ENABLED>
									<!-- The AdminServer is an embedded Jetty server that provides an HTTP interface to the four letter word commands. By default, the server is started on port 8080, and commands are issued by going to the URL "/commands/[command name]", e.g., http://localhost:8080/commands/stat -->
									<ZOO_ADMINSERVER_ENABLED>false</ZOO_ADMINSERVER_ENABLED>
									<!-- Data directory cleanup about old snapshots and log files. Time interval in hours for which the purge task has to be triggered -->
									<ZOO_AUTOPURGE_PURGEINTERVAL>24</ZOO_AUTOPURGE_PURGEINTERVAL>
									<!-- Allowed commands to ZooKeeper via telnet or nc, at the client port -->
									<ZOO_4LW_COMMANDS_WHITELIST>stat,cons,ruok</ZOO_4LW_COMMANDS_WHITELIST>
									<!-- Logging configuration -->
									<ZOO_LOG4J_PROP>INFO,ROLLINGFILE</ZOO_LOG4J_PROP>
								</env>
								<runCmds>
									<!-- TODO: Securize the directories (read-only) hosting the immutable application, OS functions and components -->
								</runCmds>
								<labels>
									<version>${project.version}</version>
									<artifactId>${project.artifactId}</artifactId>
								</labels>
							</build>
						</image>
					</images>
					<outputDirectory>target/docker</outputDirectory>
					<sourceDirectory>src/main/docker</sourceDirectory>
				</configuration>
				<executions>
					<execution>
						<id>docker-build</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
					<execution>
						<!-- Upload images to the registry -->
						<id>docker-push</id>
						<phase>deploy</phase>
						<goals>
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
