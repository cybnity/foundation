# Mandatory automatic build of java components before to manage a pull request
# that allow to detect valid compilation before to merge source codes via a pull request effort by a reviewer

name: Java Project Quality Check

run-name: Java components unit testing & quality verification

on:
  push:
    # execution when commit is pushed by a developer of a feature
    branches:
      - 'feature*'
      - 'hotfix*'
      - 'fix*'
      - 'dev*'
    # execute only when changes detected on files or java sub-projects contents
    paths:
      - 'pom.xml'
      - 'implementations-line/**'
      - 'systems-line/**'

  pull_request:
    # execution when pull request is requested by a developer (e.g to reviewer) on his development branch or another branch
    types: [opened, reopened]
    branches:
      - 'feature*'
      - 'hotfix*'
      - 'fix*'
      - 'dev*'
      - 'staging*'

    # when changes detected on files or java sub-projects
    paths:
    - 'pom.xml'
    - 'implementations-line/**'
    - 'systems-line/**'

  pull_request_target:
    # execution when feature's artifacts (e.g implementation doc, java source code) are reviewed
    branches:
      - 'feature*'
      - 'hotfix*'
      - 'fix*'
      - 'dev*'
      - 'staging*'
    # when a pull request merges, the pull request is automatically closed (so check the merged state)
    types: [closed]

jobs:
  build_and_verify_packages:
    name: Build and verify java codes quality
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout source codes from origin branch
        id: checkout_step
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          token: ${{ github.token }}
          ref: ${{ inputs.branch_name }}

      - name: Set up java version for build (Temurin JDK)
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
          # defined settings.xml values allowing Maven remote repository use
          server-id: space-cybnity-open-source
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name:  Test and verify the packages quality (phases validate, compile, test, package, verify)
        # set the MAVEN_RESULT environment variable to the value of the mvn command output text
        run: mvn --batch-mode --update-snapshots --show-version --fail-fast --file pom.xml clean verify
        env:
            MAVEN_USERNAME: ${{ secrets.SPACE_CYBNITY_OS_REPO_USERNAME }}
            MAVEN_PASSWORD: ${{ secrets.SPACE_CYBNITY_OS_REPO_PASSWORD }}

  call_workflow_to_publish_contents_version_to_remote_repository:
    name: Refresh artifacts repository
    needs: [build_and_verify_packages]
    if: |
      ${{ success()
        && github.event.pull_request.merged == true
        && github.event.pull_request.reviewDecision == 'approved'
        }}
    uses: ./.github/workflows/publish-java-packages-version-to-repository.yml
    with:
      config-path: ${{ needs.build_and_verify_packages.steps.checkout_step.ref }}
      target_repository: RELEASE
    secrets: inherit
