# Main COMMIT STAGE workflow regarding the java project managed via Maven tool
name: Java Project CI (commit stage)
run-name: Java Project COMMIT STAGE execution
on:
  push:
    # execution when development java source codes commit is pushed by a developer of a feature, hotfix, or fix branch
    branches:
      - 'feature*'
      - 'hotfix*'
      - 'fix*'
    # execute only when changes detected on files or java sub-projects contents
    paths:
      - 'pom.xml'
      - 'implementations-line/**'
      - 'systems-line/**'
      - '.github/workflows/**'

  pull_request:
    # execution when pull request is requested by a developer (e.g to reviewer) on his development branch or another branch
    types: [opened, reopened, review_requested]
    branches:
      - 'feature*'
      - 'hotfix*'
      - 'fix*'
    # execute only when reviewed files or java sub-projects
    paths:
    - 'pom.xml'
    - 'implementations-line/**'
    - 'systems-line/**'

  pull_request_target:
    # when a pull request merges, the pull request is automatically closed (so check the merged state)
    types: [closed]
    # execution when feature's artifacts (e.g implementation doc, java source code) were reviewed
    branches:
      - 'feature*'
      - 'hotfix*'
      - 'fix*'

# The commit stage workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  prepare_build_context:
    name: Java context preparation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Define reusable environment variables about current commit
        uses: FranzDiebold/github-env-vars-action@v2.7.0

  define_project_release_name:
    name: Release name preparation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check existing project defined version name
        id: release_naming
        # Read the release name defined into the GitHub project
        run: echo "RELEASE_NAME="" >> $GITHUB_ENV

      - name: Define an unique revision name (pattern <<feature branch name>>.<<commit id abbrev>>)
        if: ${{ steps.release_naming.outputs.RELEASE_NAME == "" }}
        run: |
            echo "Git commit revision $CI_SHA_SHORT abbreviation based on 7 characters (default) maximum (origin based: $CI_SHA)"
            echo "COMMIT_ID=$CI_SHA_SHORT" >> $GITHUB_ENV
            echo "FEATURE_NAME=$CI_ACTION_REF_NAME_SLUG" >> $GITHUB_ENV
            echo "VERSION_NAME=0.0.1" >> $GITHUB_ENV
            echo "Define the final version identifier aligned with versioning strategy (<<version name>>-<<feature name>>.<<commit_id>>)"
            echo "$RELEASE_NAME=${{ env.VERSION_NAME }}-${{ env.FEATURE_NAME }}.${{ env.COMMIT_ID }}"
            echo "RELEASE_NAME=${{ env.VERSION_NAME }}-${{ env.FEATURE_NAME }}.${{ env.COMMIT_ID }}" >> $GITHUB_ENV

      - name: The revision name is built
        run: echo "Prepared release name is equals to ${{ env.RELEASE_NAME }}"

  java_project_compilation:
    name: Validation & compiling
    if: success() && github.event_name == 'push'
    needs: [prepare_build_context, define_project_release_name]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout source codes from branch
        id: checkout_step
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          token: ${{ github.token }}
          ref: ${{ inputs.branch_name }}

      - name: Set up java runtime (Temurin JDK)
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
          # defined settings.xml values allowing use of CYBNITY Maven remote repository
          server-id: space-cybnity-open-source
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Validate all necessary information and compile source code
        run: |
          mvn --batch-mode --update-snapshots --show-version --fail-fast --file pom.xml clean compile
        env:
            MAVEN_USERNAME: ${{ secrets.SPACE_CYBNITY_OS_REPO_USERNAME }}
            MAVEN_PASSWORD: ${{ secrets.SPACE_CYBNITY_OS_REPO_PASSWORD }}

      - name: Cache entire workspace directory
        uses: actions/upload-artifact@v3
        with:
          name: maven-workspace
          path: .
          retention-days: 1

  unit_testing:
    name: Unit testing of compiled code
    needs: [java_project_compilation]
    if: success() && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Retrieve cached maven workspace
        uses: actions/download-artifact@v3
        with:
          name: maven-workspace

      - name: Set up java runtime (Temurin JDK)
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
          # defined settings.xml values allowing use of CYBNITY Maven remote repository
          server-id: space-cybnity-open-source
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Execute tests of the compiled source code
        run: |
          mvn --batch-mode --update-snapshots --show-version --fail-fast --file pom.xml test
        env:
            MAVEN_USERNAME: ${{ secrets.SPACE_CYBNITY_OS_REPO_USERNAME }}
            MAVEN_PASSWORD: ${{ secrets.SPACE_CYBNITY_OS_REPO_PASSWORD }}

  packaging:
    name: Binary packaging
    if: success() && github.event_name == 'push'
    needs: [unit_testing]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Retrieve cached maven workspace
        uses: actions/download-artifact@v3
        with:
          name: maven-workspace

      - name: Package compiled java code in its distributable format (e.g JAR)
        run: mvn --batch-mode --update-snapshots --show-version --fail-fast --file pom.xml package
        env:
            MAVEN_USERNAME: ${{ secrets.SPACE_CYBNITY_OS_REPO_USERNAME }}
            MAVEN_PASSWORD: ${{ secrets.SPACE_CYBNITY_OS_REPO_PASSWORD }}

      - name: Refresh entire workspace directory cache
        uses: actions/upload-artifact@v3
        with:
          name: maven-workspace
          path: .
          retention-days: 1

  quality_verification:
    name: Quality verification
    if: success() && github.event_name == 'push'
    needs: [packaging]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Retrieve cached maven workspace
        uses: actions/download-artifact@v3
        with:
          name: maven-workspace

      - name: Verify packaged components
        run: |
          echo "Run any checks to very the package is valid and meets quality criteria"
          mvn --batch-mode --update-snapshots --show-version --fail-fast --file pom.xml verify

        env:
            MAVEN_USERNAME: ${{ secrets.SPACE_CYBNITY_OS_REPO_USERNAME }}
            MAVEN_PASSWORD: ${{ secrets.SPACE_CYBNITY_OS_REPO_PASSWORD }}

  publish_version_to_remote_repository:
    # publish only alpha release closed (with success by approved review) on RELEASE remote repository only
    # publisg snapshot version of parent pom.xml (when approved review) on SNAPSHOT remote repository
    name: Package version remote installation
    if: ${{ success()
          && github.event.pull_request.merged == true
          && github.event.pull_request.reviewDecision == 'approved'
          }}
    needs: [prepare_build_context, define_project_release_name]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - env:
          EVENT_CONTEXT: ${{ toJSON(github.event) }}
        run: |
          echo The PR was merged
          echo Check the alpha tag is attached (when it's a pull_request_target type with reviewer who assigned alpha tag)

          echo SEPARE THE 2 SCENARIO IN 2 INDEPENDANT SUB-JOBS
          echo CASE REVIEWED WITHOUT TAG : When not alpha tagged, prepare only a snapshot version of the parent pom.xml for remote repository installation
          echo CASE QUALITY REVIEWED FEATURE AS ALPHA RELEASE : When alpha tagged, prepare a release package (alpha version as version name) ready for publishing to remote Repository
          echo Build with maven the java component packages according to the final version name
          echo CASE REVIEWED WITHOUT TAG : Deploy parent pom.xml on remote snapshot repository for version named (available for other developers)
          echo CASE QUALITY REVIEWED FEATURE AS ALPHA RELEASE : Deploy feature revision on remote release repository (reusable by other development, for e.g on development shared environment)
