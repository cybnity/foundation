# Main COMMIT STAGE workflow regarding the java project managed via Maven tool
name: Java Project CI (commit stage)
run-name: Java project CI execution
on:
  push:
    # execution when development java source codes commit is pushed by a developer of a feature, hotfix, or fix branch
    branches:
      - 'feature*'
      - 'hotfix*'
      - 'fix*'
    # execute only when changes detected on files or java sub-projects contents
    paths:
      - 'pom.xml'
      - 'implementations-line/**'
      - 'systems-line/**'
      - '.github/workflows/**'

# The commit stage workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  prepare_build_context:
    name: Java context preparation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Define reusable environment variables about current commit
        uses: FranzDiebold/github-env-vars-action@v2.7.0

  define_project_release_name:
    name: Project release name preparation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check existing project defined version name
        id: release_naming
        # Read the release name defined into the GitHub project
        run: echo "RELEASE_NAME=''" >> $GITHUB_ENV

      - name: Define an unique revision name (pattern <<feature branch name>>.<<commit id abbrev>>)
        if: ${{ steps.release_naming.outputs.RELEASE_NAME == '' }}
        run: |
            echo "Git commit revision $CI_SHA_SHORT abbreviation based on 7 characters (default) maximum (origin based: $CI_SHA)"
            echo "COMMIT_ID=$CI_SHA_SHORT" >> $GITHUB_ENV
            echo "FEATURE_NAME=$CI_ACTION_REF_NAME_SLUG" >> $GITHUB_ENV
            echo "VERSION_NAME=0.0.1" >> $GITHUB_ENV
            echo "Define the final version identifier aligned with versioning strategy (<<version name>>-<<feature name>>.<<commit_id>>)"
            echo "RELEASE_NAME=${{ env.VERSION_NAME }}-${{ env.FEATURE_NAME }}.${{ env.COMMIT_ID }}" >> $GITHUB_ENV

  java_project_compilation:
    name: Validation & compiling
    if: success() && github.event_name == 'push'
    needs: [prepare_build_context, define_project_release_name]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout source codes from branch
        id: checkout_step
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          token: ${{ github.token }}
          ref: ${{ inputs.branch_name }}

      - name: Set up java runtime (Temurin JDK)
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
          # defined settings.xml values allowing use of CYBNITY Maven remote repository
          server-id: space-cybnity-open-source
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Validate all necessary information and compile source code
        id: validated_compilation
        # cpy the built project into a directory shareed with other jobs
        run: |
          mvn --batch-mode --update-snapshots --show-version --fail-fast --file pom.xml clean compile
          mkdir -p path/to/project
          cp -R . path/to/project
          echo "MAVEN_WORKSPACE=path/to/project" >> $GITHUB_OUTPUT
        env:
            MAVEN_USERNAME: ${{ secrets.SPACE_CYBNITY_OS_REPO_USERNAME }}
            MAVEN_PASSWORD: ${{ secrets.SPACE_CYBNITY_OS_REPO_PASSWORD }}

  unit_testing:
    name: Unit testing of compiled code
    if: success() && github.event_name == 'push'
    needs: [java_project_compilation]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      maven-workspace-path: ${{ needs.java_project_compilation.steps.validated_compilation.outputs.MAVEN_WORKSPACE }}
    steps:
      - name: Execute tests of the compiled source code
        id: tested_codes
        run: |
          echo current Maven processed workspace is ${{ env.maven-workspace-path }}
          cd ${{ env.maven-workspace-path }}
          mvn --batch-mode --update-snapshots --show-version --fail-fast --file pom.xml test
        env:
            MAVEN_USERNAME: ${{ secrets.SPACE_CYBNITY_OS_REPO_USERNAME }}
            MAVEN_PASSWORD: ${{ secrets.SPACE_CYBNITY_OS_REPO_PASSWORD }}

  packaging:
    name: Binary packaging
    if: success() && github.event_name == 'push'
    needs: [unit_testing]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Package compiled java code in its distributable format (e.g JAR)
        id: packaged_artifacts
        run: mvn --batch-mode --update-snapshots --show-version --fail-fast --file pom.xml package
        env:
            MAVEN_USERNAME: ${{ secrets.SPACE_CYBNITY_OS_REPO_USERNAME }}
            MAVEN_PASSWORD: ${{ secrets.SPACE_CYBNITY_OS_REPO_PASSWORD }}
            config-path: ${{ needs.unit_testing.steps.tested_codes.ref }}

  quality_verification:
    name: Quality verification
    if: success() && github.event_name == 'push'
    needs: [packaging]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: QUALITY VERIFICATION of packaged components
        run: |
          echo "Run any checks to very the package is valid and meets quality criteria"
          mvn --batch-mode --update-snapshots --show-version --fail-fast --file pom.xml verify
        env:
            MAVEN_USERNAME: ${{ secrets.SPACE_CYBNITY_OS_REPO_USERNAME }}
            MAVEN_PASSWORD: ${{ secrets.SPACE_CYBNITY_OS_REPO_PASSWORD }}
            config-path: ${{ needs.packaging.steps.packaged_artifacts.ref }}

#  maven_parent_pom_publishing:
#    name: Maven parent pom.xml publishing
#    if: success() && github.event_name == 'push'
#    needs: [java_project_quality_verification]
#    with:
#      ref: ${{ needs.java_project_quality_verification.steps. }}
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#    steps:
