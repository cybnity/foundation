# Main COMMIT STAGE workflow regarding the java project managed via Maven tool
name: Java Project CI (commit stage)
run-name: Java Project COMMIT STAGE execution
on:
  push:
    # execution when development java source codes commit is pushed by a developer of a feature, hotfix, or fix branch
    branches:
      - 'feature*'
      - 'hotfix*'
      - 'fix*'
    # execute only when changes detected on files or java sub-projects contents
    paths:
      - 'pom.xml'
      - 'implementations-line/**'
      - 'systems-line/**'
      - '.github/workflows/java-project-ci.yml'

  pull_request:
    # execution when pull request is requested by a developer (e.g to reviewer) on his development branch or another branch
    types: [opened, reopened, review_requested]
    branches:
      - 'feature*'
      - 'hotfix*'
      - 'fix*'
    # execute only when reviewed files or java sub-projects
    paths:
    - 'pom.xml'
    - 'implementations-line/**'
    - 'systems-line/**'

  pull_request_target:
    # when a pull request merges, the pull request is automatically closed (so check the merged state)
    types: [closed]
    # execution when feature's artifacts (e.g implementation doc, java source code) were reviewed
    branches:
      - 'feature*'
      - 'hotfix*'
      - 'fix*'

# The commit stage workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  define_project_release_name:
    name: Release name preparation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      release_name: ${{ env.release_name }}
    steps:
      - name: Check existing project defined version name
        # Read the release name defined into the GitHub project
        run: |
          echo The current release tag is ${{ github.event.release.tag_name }}
          echo "TAG_VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV

      - name: Set the release name of the project based on GitHub tag name
        if: ${{ env.TAG_VERSION != '' }}
        run : |
            echo "Define the final version identifier from the GitHub project's current tag name"
            echo "release_name=$TAG_VERSION" >> $GITHUB_ENV

      # Build specific release name because none tag is existing on GitHub project
      - name: Define reusable environment variables about current commit
        if: ${{ env.TAG_VERSION == '' }}
        uses: FranzDiebold/github-env-vars-action@v2.7.0

      - name: Define an unique revision name (pattern <<feature branch name>>.<<commit id abbrev>>)
        if: ${{ env.TAG_VERSION == '' }}
        # todo: modify the static version_name with tag version name or default name
        run: |
            echo "Git commit revision $CI_SHA_SHORT abbreviation based on 7 characters (default) maximum (origin based: $CI_SHA)"
            echo "COMMIT_ID=$CI_SHA_SHORT" >> $GITHUB_ENV
            echo "FEATURE_NAME=$CI_ACTION_REF_NAME_SLUG" >> $GITHUB_ENV
            echo "VERSION_NAME=0.0.0" >> $GITHUB_ENV

      - name: Set the release name of the project based on CYBNITY versioning strategy
        if: ${{ env.TAG_VERSION == '' }}
        run: |
            echo "Define the final version identifier aligned with versioning strategy (<<version name>>-<<feature name>>.<<commit_id>>)"
            echo "release_name=$VERSION_NAME-$FEATURE_NAME.$COMMIT_ID" >> $GITHUB_ENV

  java_project_compilation:
    name: Validation & compiling
    if: success() && github.event_name == 'push'
    needs: [define_project_release_name]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      RELEASE_NAME: ${{ needs.define_project_release_name.outputs.release_name }}
    outputs:
      release_name: ${{ env.RELEASE_NAME }}
    steps:
      - name: Checkout source codes from branch
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          token: ${{ github.token }}
          ref: ${{ inputs.branch_name }}

      - name: Set up java runtime (Temurin JDK)
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
          # defined settings.xml values allowing use of CYBNITY Maven remote repository
          server-id: space-cybnity-open-source
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Validate all necessary information and compile source code
        run: |
          echo "Set the project artifacts version"
          mvn versions:set -DnewVersion=${{ env.RELEASE_NAME }} -B -DgenerateBackupPoms=true -DprocessAllModules=true
          echo "Execute the java project(s) build via Maven tool"
          mvn --batch-mode --update-snapshots --show-version --fail-fast --file pom.xml clean compile -Drevision=${{ env.RELEASE_NAME }}
        env:
            MAVEN_USERNAME: ${{ secrets.SPACE_CYBNITY_OS_REPO_USERNAME }}
            MAVEN_PASSWORD: ${{ secrets.SPACE_CYBNITY_OS_REPO_PASSWORD }}

  unit_testing:
    name: Unit testing of compiled code
    needs: [java_project_compilation]
    if: success() && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      RELEASE_NAME: ${{ needs.java_project_compilation.outputs.release_name }}
    outputs:
      release_name: ${{ env.RELEASE_NAME }}
    steps:
      - name: Checkout source codes from branch
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          token: ${{ github.token }}
          ref: ${{ inputs.branch_name }}

      - name: Set up java runtime (Temurin JDK)
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
          # defined settings.xml values allowing use of CYBNITY Maven remote repository
          server-id: space-cybnity-open-source
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Execute tests of the compiled source code
        run: |
          mvn --batch-mode --update-snapshots --show-version --fail-fast --file pom.xml test -Drevision=${{ env.RELEASE_NAME }} -Dmaven.test.skip=false
        env:
            MAVEN_USERNAME: ${{ secrets.SPACE_CYBNITY_OS_REPO_USERNAME }}
            MAVEN_PASSWORD: ${{ secrets.SPACE_CYBNITY_OS_REPO_PASSWORD }}

  packaging:
    name: Binary packaging
    if: success() && github.event_name == 'push'
    needs: [unit_testing]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      RELEASE_NAME: ${{ needs.unit_testing.outputs.release_name }}
    outputs:
      release_name: ${{ env.RELEASE_NAME }}
    steps:
      - name: Checkout source codes from branch
        id: checkout_step
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          token: ${{ github.token }}
          ref: ${{ inputs.branch_name }}

      - name: Set up java runtime (Temurin JDK)
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
          # defined settings.xml values allowing use of CYBNITY Maven remote repository
          server-id: space-cybnity-open-source
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Package compiled java code in its distributable format (e.g JAR)
        run: |
          mvn --batch-mode --update-snapshots --show-version --fail-fast --file pom.xml package -Drevision=${{ env.RELEASE_NAME }}
        env:
            MAVEN_USERNAME: ${{ secrets.SPACE_CYBNITY_OS_REPO_USERNAME }}
            MAVEN_PASSWORD: ${{ secrets.SPACE_CYBNITY_OS_REPO_PASSWORD }}

  quality_verification:
    name: Quality verification
    if: success() && github.event_name == 'push'
    needs: [packaging]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      RELEASE_NAME: ${{ needs.packaging.outputs.release_name }}
    outputs:
      release_name: ${{ env.RELEASE_NAME }}
    steps:
      - name: Checkout source codes from branch
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          token: ${{ github.token }}
          ref: ${{ inputs.branch_name }}

      - name: Set up java runtime (Temurin JDK)
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
          # defined settings.xml values allowing use of CYBNITY Maven remote repository
          server-id: space-cybnity-open-source
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Verify packaged components
        run: |
          echo "Run any checks to very the package is valid and meets quality criteria"
          mvn --batch-mode --update-snapshots --show-version --fail-fast --file pom.xml verify -Drevision=${{ env.RELEASE_NAME }} -DskipTests
        env:
            MAVEN_USERNAME: ${{ secrets.SPACE_CYBNITY_OS_REPO_USERNAME }}
            MAVEN_PASSWORD: ${{ secrets.SPACE_CYBNITY_OS_REPO_PASSWORD }}

  publish_version_to_remote_repository:
    name: Package version for remote installation
    if: ${{ success()
          && github.event.pull_request.merged == true
          && github.event.pull_request.reviewDecision == 'approved'
          }}
    needs: [quality_verification, packaging]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      RELEASE_NAME: ${{ needs.quality_verification.outputs.release_name }}
    steps:
      - env:
          EVENT_CONTEXT: ${{ toJSON(github.event) }}
        run: |
          echo The PR was merged
          echo Check the alpha tag is attached (when it's a pull_request_target type with reviewer who assigned alpha tag)

          echo SEPARE THE 2 SCENARIO IN 2 INDEPENDANT SUB-JOBS
          echo CASE QUALITY REVIEWED FEATURE AS ALPHA RELEASE : When alpha tagged, prepare a release package (alpha version as version name) ready for publishing to remote Repository
          echo Build with maven the java component packages according to the final version name
          echo CASE REVIEWED WITHOUT TAG : Deploy parent pom.xml on remote snapshot repository for version named (available for other developers)
          echo CASE QUALITY REVIEWED FEATURE AS ALPHA RELEASE : Deploy feature revision on remote release repository (reusable by other development, for e.g on development shared environment)

  # CASE REVIEWED WITHOUT TAG : When not alpha tagged, prepare only a snapshot version for remote repository installation
  publish_version_to_snapshot_remote_repository:
    name: Publish on snapshot remote repository
    # Check the alpha tag is attached (when it's a pull_request_target type with reviewer who did not assigned alpha tag because decided not sufficient finished work on feature)
    if: ${{ success() }}
            #    && github.event.pull_request.merged == true
            #    && github.event.pull_request.reviewDecision == 'approved'
    needs: [quality_verification, packaging]
    uses: ./.github/workflows/publish-java-packages-version-to-repository.yml
    with:
      config-path: ${{ needs.packaging.steps.checkout_step.ref }}
      target_repository: SNAPSHOT
      package_release_name: ${{ needs.quality_verification.outputs.release_name }}-snapshot
    secrets: inherit
    #env:
    #  RELEASE_NAME: ${{ needs.quality_verification.outputs.release_name }}
    # echo The Pull Request (PR) was approved and merged, but work is not finished and tagged as alpha eligible version
    # echo Publish approved snapshot version of parent pom.xml and sub-projects
    # Publish alpha release closed (with success by approved review) on RELEASE remote repository only



  #pre-release:
  #  name: Tag latest pre-release
  #  if: github.event_name == 'push'
  #  needs: [quality_verification, publish_version_to_remote_repository]
  #  runs-on: ubuntu-latest
  #  permissions:
  #    contents: write
  #  steps:
  #    - name: Generate a pre-release "latest" tag when changes land on branch
        # Generate a changelog from all the commits between this, and the previous latest tag.
        # Generate a new release associated with the latest tag (removing any previous associated releases).
        # Update this new release with the specified title (e.g. Development Build).
        # Upload LICENSE.txt and any jar files as release assets.
        # Mark this release as a pre-release
  #      uses: "marvinpinto/action-automatic-releases@v1.2.1"
  #      with:
  #        repo_token: "${{ secrets.GITHUB_TOKEN }}"
  #        automatic_release_tag: "latest"
  #        prerelease: true
  #        title: "Development CI"
  #        files: |
  #          LICENSE
  #          **/*.jar
